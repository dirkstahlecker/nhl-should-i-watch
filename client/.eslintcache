[{"/Users/dirkstahlecker/programming/nhl-should-i-watch/client/src/index.tsx":"1","/Users/dirkstahlecker/programming/nhl-should-i-watch/client/src/App.tsx":"2","/Users/dirkstahlecker/programming/nhl-should-i-watch/client/src/teams.ts":"3"},{"size":548,"mtime":1611365797750,"results":"4","hashOfConfig":"5"},{"size":18950,"mtime":1611366540479,"results":"6","hashOfConfig":"5"},{"size":531,"mtime":1610688860105,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1jh4b4u",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/dirkstahlecker/programming/nhl-should-i-watch/client/src/index.tsx",[],["17","18"],"/Users/dirkstahlecker/programming/nhl-should-i-watch/client/src/App.tsx",["19","20"],"import React from 'react';\nimport './App.css';\nimport Cookies from 'js-cookie';\nimport {observer} from \"mobx-react\";\nimport {makeObservable, observable, runInAction, action} from \"mobx\";\nimport { teams } from './teams';\nimport ReactTooltip from \"react-tooltip\";\n\nexport class AppMachine\n{\n  public DEFAULT_MARGIN: string = \"1\";\n  public DEFAULT_PERCENTAGE = \"10\";\n  public DEFAULT_WIN_DIFF = \"\"\n\n  @observable public error: any = null;\n  @observable public worthWatching: boolean | null = null;\n  @observable public selectedTeam: number = teams.BRUINS;\n  @observable public margin: string | null = this.DEFAULT_MARGIN;\n  @observable public percentage: string | null = this.DEFAULT_PERCENTAGE;\n  @observable public maxWinDifferential: string | null = this.DEFAULT_WIN_DIFF;\n  @observable public date: string = \"\";\n  @observable public hatTrickHome: boolean = false;\n  @observable public hatTrickAway: boolean = false;\n\n  LOCAL = false;\n\n  constructor()\n  {\n    makeObservable(this);\n  }\n}\n\nexport interface AppProps\n{\n  machine: AppMachine;\n}\n\n@observer\nclass App extends React.Component<AppProps>\n{\n  private get machine(): AppMachine\n  {\n    return this.props.machine;\n  }\n\n  setInitialSelectedTeam = async () => {\n    const selectedCookie = Cookies.get(\"initialSelectedTeam\");\n    if (selectedCookie != null)\n    {\n      this.machine.selectedTeam = Number.parseInt(selectedCookie);\n      return selectedCookie;\n    }\n\n    const locationUrl = \"http:\\//ip-api.com/json/?fields=status,message,countryCode,region,regionName,city,query\";\n    const locationDataRaw = await fetch(locationUrl); //, {mode: \"no-cors\"}\n    const locationData = await locationDataRaw.json();\n\n    console.log(\"Location data region: \" + locationData.region);\n\n    if (locationData.status === \"fail\")\n    {\n      return; //use defaults\n    }\n\n    let initialSelectedTeam = teams.BRUINS //TODO\n\n    //https://ip-api.com/docs/api:json#test\n\n    switch (locationData.region)\n    {\n      case \"AL\":\n        initialSelectedTeam = teams.PREDATORS;\n        break;\n      case \"AK\":\n        initialSelectedTeam = teams.CANUCKS;\n        break;\n      case \"AZ\":\n        initialSelectedTeam = teams.COYOTES;\n        break;\n      case \"AR\":\n        initialSelectedTeam = teams.STARS;\n        break;\n      case \"CA\":\n        //TODO\n        initialSelectedTeam = teams.KINGS;\n        break;\n      case \"CO\":\n        initialSelectedTeam = teams.AVALANCHE;\n        break;\n      case \"CT\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"DE\":\n        initialSelectedTeam = teams.FLYERS;\n        break;\n      case \"FL\":\n        initialSelectedTeam = teams.PANTHERS;\n        //TODO\n        break;\n      case \"GA\":\n        initialSelectedTeam = teams.LIGHTNING;\n        break;\n      case \"HI\":\n        initialSelectedTeam = teams.SHARKS;\n        break;\n      case \"ID\":\n        initialSelectedTeam = teams.AVALANCHE;\n        break;\n      case \"IL\":\n        initialSelectedTeam = teams.BLACKHAWKS;\n        break;\n      case \"IN\":\n        initialSelectedTeam = teams.BLACKHAWKS;\n        break;\n      case \"IA\":\n        initialSelectedTeam = teams.WILD;\n        break;\n      case \"KS\":\n        initialSelectedTeam = teams.AVALANCHE;\n        break;\n      case \"KY\":\n        initialSelectedTeam = teams.PREDATORS;\n        break;\n      case \"LA\":\n        initialSelectedTeam = teams.STARS;\n        break;\n      case \"ME\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"MD\":\n        initialSelectedTeam = teams.CAPITALS;\n        break;\n      case \"MA\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"MI\":\n        initialSelectedTeam = teams.REDWINGS;\n        break;\n      case \"MN\":\n        initialSelectedTeam = teams.WILD;\n        break;\n      case \"MS\":\n        initialSelectedTeam = teams.PREDATORS;\n        break;\n      case \"MO\":\n        initialSelectedTeam = teams.BLUES;\n        break;\n      case \"MT\":\n        initialSelectedTeam = teams.FLAMES;\n        break;\n      case \"NE\":\n        initialSelectedTeam = teams.AVALANCHE;\n        break;\n      case \"NV\":\n        initialSelectedTeam = teams.KNIGHTS;\n        break;\n      case \"NH\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"NJ\":\n        initialSelectedTeam = teams.DEVILS;\n        break;\n      case \"NM\":\n        initialSelectedTeam = teams.COYOTES;\n        break;\n      case \"NY\":\n        initialSelectedTeam = teams.RANGERS; //TODO:\n        break;\n      case \"NC\":\n        initialSelectedTeam = teams.HURRICANES;\n        break;\n      case \"ND\":\n        initialSelectedTeam = teams.JETS;\n        break;\n      case \"OH\":\n        initialSelectedTeam = teams.BLUEJACKETS;\n        break;\n      case \"OK\":\n        initialSelectedTeam = teams.STARS;\n        break;\n      case \"OR\":\n        initialSelectedTeam = teams.CANUCKS;\n        break;\n      case \"PA\":\n        initialSelectedTeam = teams.PENGUINS; //TODO\n        break;\n      case \"RI\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"SC\":\n        initialSelectedTeam = teams.HURRICANES;\n        break;\n      case \"SD\":\n        initialSelectedTeam = teams.WILD;\n        break;\n      case \"TN\":\n        initialSelectedTeam = teams.PREDATORS;\n        break;\n      case \"TX\":\n        initialSelectedTeam = teams.STARS;\n        break;\n      case \"UT\":\n        initialSelectedTeam = teams.KNIGHTS;\n        break;\n      case \"VT\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"VA\":\n        initialSelectedTeam = teams.CAPITALS;\n        break;\n      case \"WA\":\n        initialSelectedTeam = teams.CANUCKS;\n        break;\n      case \"WV\":\n        initialSelectedTeam = teams.PENGUINS;\n        break;\n      case \"WI\":\n        initialSelectedTeam = teams.WILD;\n        return;\n      case \"WY\":\n        initialSelectedTeam = teams.AVALANCHE;\n        break;\n      case \"AB\":\n        initialSelectedTeam = teams.OILERS; //TODO\n        break;\n      case \"BC\":\n        initialSelectedTeam = teams.CANUCKS;\n        break;\n      case \"MB\":\n        initialSelectedTeam = teams.JETS;\n        break;\n      case \"NB\":\n        initialSelectedTeam = teams.BRUINS;\n        break;\n      case \"NL\":\n        initialSelectedTeam = teams.CANADIENS;\n        break;\n      case \"NS\":\n        initialSelectedTeam = teams.CANADIENS;\n        break;\n      case \"ON\":\n        initialSelectedTeam = teams.LEAFS;\n        break;\n      case \"PE\":\n        initialSelectedTeam = teams.CANADIENS;\n        break;\n      default:\n        initialSelectedTeam = teams.BRUINS;\n        break;\n    }\n\n    this.machine.selectedTeam = initialSelectedTeam;\n    Cookies.set(\"initialSelectedTeam\", String(initialSelectedTeam));\n  }\n\n  @action\n  componentDidMount()\n  {\n    this.setInitialSelectedTeam();\n\n    const marginCookie = Cookies.get(\"margin\");\n    if (marginCookie !== undefined)\n    {\n      this.machine.margin = marginCookie;\n    }\n    else\n    {\n      this.machine.margin = this.machine.DEFAULT_MARGIN;\n    }\n\n    const percentCookie = Cookies.get(\"percentage\");\n    if (percentCookie !== undefined)\n    {\n      this.machine.percentage = percentCookie;\n    }\n    else\n    {\n      this.machine.percentage = this.machine.DEFAULT_PERCENTAGE;\n    }\n\n    const maxWinCookie = Cookies.get(\"maxWinDifferential\");\n    if (maxWinCookie !== undefined)\n    {\n      this.machine.maxWinDifferential = maxWinCookie;\n    }\n    else\n    {\n      this.machine.maxWinDifferential = this.machine.DEFAULT_WIN_DIFF;\n    }\n\n    //default to today's date\n    let today: Date | string = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth()+1; //January is 0\n    let yyyy = today.getFullYear();\n    let day = String(dd);\n    let month = String(mm);\n    let year = String(yyyy);\n    if (dd < 10)\n    {\n      day = '0'+dd\n    }\n    if (mm < 10)\n    {\n      month = '0'+mm\n    }\n    today = year + \"-\" + month + \"-\" + day;\n\n    this.machine.date = today;\n  }\n\n  private fetchData = async () => {\n    const teamId = this.machine.selectedTeam;\n    const dateStr = this.machine.date;\n\n    if (dateStr == null)\n    {\n      this.machine.error = \"Invalid date\";\n      return;\n    }\n\n    const day = dateStr.substring(8, 10);\n    const date = new Date(dateStr);\n    // const isValidDate = (Boolean(+date) && date.getDate() == day);\n\n    if (date == null || date === undefined)\n    {\n      this.machine.error = \"Invalid date\";\n      return;\n    }\n    \n    // var absolute_path = __dirname;\n\n    //TODO\n    // const urlPrefix = this.machine.LOCAL ? \"http:\\//localhost:5000\" : \"https:\\//nhl-should-i-watch.herokuapp.com\"; //TODO:\n    var url = \"/api/worthWatching/\" + teamId + \"/\" + dateStr;\n    console.log(\"fetching url \" + url);\n\n    // const differential = document.getElementById(\"marginInp\").value;\n    // const randomPercent = document.getElementById(\"randomPercent\").value;\n    // const maxWinDifferential = document.getElementById(\"maxWinDifferential\").value;\n    const differential = this.machine.margin;\n    const randomPercent = this.machine.percentage;\n    const maxWinDifferential = this.machine.maxWinDifferential;\n    const hatTrickHome = this.machine.hatTrickHome;\n    const hatTrickAway = this.machine.hatTrickAway;\n\n    const response = await this.postRequest(url, \n      {differential: differential, randomPercent: randomPercent, maxWinDifferential: maxWinDifferential,\n      hatTrickHome: hatTrickHome, hatTrickAway: hatTrickAway});\n\n    if (response.error)\n    {\n      this.machine.error = response.error;\n      return;\n    }\n\n    runInAction(() => {\n      this.machine.error = response.error;\n      this.machine.worthWatching = response.worthWatching;\n    });    \n  }\n\n  private postRequest = async (url: string, data = {}) =>\n  {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      // mode: 'cors', // no-cors, *cors, same-origin\n      // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      // credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // redirect: 'follow', // manual, *follow, error\n      // referrer: 'no-referrer', // no-referrer, *client\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return await response.json(); // parses JSON response into native JavaScript objects\n  }\n\n  @action\n  onMarginChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const margin = e.currentTarget.value;\n    this.machine.margin = margin;\n    Cookies.set(\"margin\", margin);\n  }\n\n  @action\n  onPercentChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const percentage = e.currentTarget.value;\n    this.machine.percentage = percentage;\n    Cookies.set(\"percentage\", percentage);\n  }\n\n  @action\n  onTeamChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    //reset result when team or date changes\n    this.machine.worthWatching = null;\n    this.machine.error = null;\n\n    const teamId = e.currentTarget.value;\n    this.machine.selectedTeam = Number.parseInt(teamId);\n    Cookies.set(\"initialSelectedTeam\", teamId);\n  }\n\n  @action\n  onMaxWinChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const maxWinDiff = e.currentTarget.value;\n    this.machine.maxWinDifferential = maxWinDiff;\n    Cookies.set(\"maxWinDifferential\", maxWinDiff);\n  }\n\n  @action\n  onDateChange = (e: React.FormEvent<HTMLInputElement>) => {\n    //reset result when team or date changes\n    this.machine.worthWatching = null;\n    this.machine.error = null;\n\n    this.machine.date = e.currentTarget.value;\n  }\n\n  @action\n  onHatTrickHomeChange = (e: React.FormEvent<HTMLInputElement>) => {\n    this.machine.hatTrickHome = e.currentTarget.checked;\n  }\n\n  @action\n  onHatTrickAwayChange = (e: React.FormEvent<HTMLInputElement>) => {\n    this.machine.hatTrickAway = e.currentTarget.checked;\n  }\n\n  private renderTeamDropdown(): JSX.Element\n  {\n    return <>\n      <label htmlFor=\"teamId\">Team: </label>\n      <select id=\"teamId\" onChange={this.onTeamChange} value={this.machine.selectedTeam}>\n        <option value={teams.DUCKS}>Anaheim Ducks</option>\n        <option value={teams.COYOTES}>Arizona Coyotes</option>\n        <option value={teams.BRUINS}>Boston Bruins</option>\n        <option value={teams.SABRES}>Buffalo Sabres</option>\n        <option value={teams.FLAMES}>Calgary Flames</option>\n        <option value={teams.HURRICANES}>Carolina Hurricanes</option>\n        <option value={teams.BLACKHAWKS}>Chicago Blackhawks</option>\n        <option value={teams.AVALANCHE}>Colorado Avalanche</option>\n        <option value={teams.BLUEJACKETS}>Columbus Blue Jackets</option>\n        <option value={teams.STARS}>Dallas Stars</option>\n        <option value={teams.REDWINGS}>Detroit Red Wings</option>\n        <option value={teams.OILERS}>Edmonton Oilers</option>\n        <option value={teams.PANTHERS}>Florida Panthers</option>\n        <option value={teams.KINGS}>Los Angeles Kings</option>\n        <option value={teams.WILD}>Minnesota Wild</option>\n        <option value={teams.CANADIENS}>Montreal Canadiens</option>\n        <option value={teams.PREDATORS}>Nashville Predators</option>\n        <option value={teams.DEVILS}>New Jersey Devils</option>\n        <option value={teams.ISLANDERS}>New York Islanders</option>\n        <option value={teams.RANGERS}>New York Rangers</option>\n        <option value={teams.SENATORS}>Ottawa Senators</option>\n        <option value={teams.FLYERS}>Philadelphia Flyers</option>\n        <option value={teams.PENGUINS}>Pittsburgh Penguins</option>\n        <option value={teams.SHARKS}>San Jose Sharks</option>\n        <option value={teams.BLUES}>St. Louis Blues</option>\n        <option value={teams.LIGHTNING}>Tampa Bay Lightning</option>\n        <option value={teams.LEAFS}>Toronto Maple Leafs</option>\n        <option value={teams.CANUCKS}>Vancouver Canucks</option>\n        <option value={teams.KNIGHTS}>Vegas Golden Knights</option>\n        <option value={teams.CAPITALS}>Washington Capitals</option>\n        <option value={teams.JETS}>Winnipeg Jets</option>\n      </select>\n    </>;\n  }\n\n  private renderNumberMetric(id: string, value: string | null, label: string, tooltip: string,\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void): JSX.Element\n  {\n    return <div className=\"metricRow\">\n      <input \n        type=\"number\"\n        id={id}\n        className=\"numberInput\"\n        value={value == null ? \"\" : value} \n        onChange={onChange}\n      />\n      \n      &nbsp;\n\n      <label htmlFor={id}>\n        {/* {label} <span data-tip={tooltip}>&#9432;</span> */}\n        {label}&nbsp;\n        <span data-tip data-for={id}>\n          &#9432;\n        </span>\n        <ReactTooltip id={id} place=\"top\" effect=\"solid\">\n          {tooltip}\n        </ReactTooltip>\n      </label>\n    </div>;\n  }\n\n  private renderHatTrickMetric(): JSX.Element\n  {\n    return <div className=\"metricRow\">\n      Hat Trick:\n      <label>Home Team:</label>\n      &nbsp;\n      <input \n        type=\"checkbox\" \n        id={\"hatTrickMetric_home\"} \n        checked={this.machine.hatTrickHome} \n        onChange={this.onHatTrickHomeChange}\n      />\n      <label>Away Team:</label>\n      &nbsp;\n      <input \n        type=\"checkbox\" \n        id={\"hatTrickMetric_home\"} \n        checked={this.machine.hatTrickAway} \n        onChange={this.onHatTrickAwayChange}\n      />\n    </div>;\n  }\n\n  private renderFooter(): JSX.Element\n  {\n    return <div className=\"footer\">\n      <div className=\"footer_contents\">\n        Questions or feedback? Email <a href=\"mailto:nhlshouldiwatchapp@gmail.com\">NHLShouldIWatchApp@gmail.com</a>\n        <br/>\n        Website Copyright &#169; {new Date().getFullYear()} Dirk Stahlecker\n      </div>\n    </div>;\n  }\n\n  render()\n  {\n    return (\n      <div className=\"outerArea\">\n        <div className=\"App\">\n          <div className=\"headerSection\">\n            <h1>Should I Watch?</h1>\n            <h3>Quickly find out if a recorded NHL game is worth watching</h3>\n          </div>\n          <div className=\"bodySection\">\n            <div className=\"columnSection gameOptions\">\n              {this.renderTeamDropdown()}\n              &nbsp;\n              <label htmlFor=\"date\">Game Date: </label>\n              <input type=\"date\" id=\"date\" value={this.machine.date} onChange={this.onDateChange}/>\n\n              &nbsp;\n              <button onClick={this.fetchData}>Should I Watch?</button>\n            </div>\n            <div className=\"columnSection resultsArea\">\n              {\n                this.machine.worthWatching != null && this.machine.error == null &&\n                <div className={this.machine.worthWatching ? \"resultYes\" : \"resultNo\"}>\n                  {this.machine.worthWatching ? \"YES\" : \"NO\"}\n                </div>\n              }\n              {\n                this.machine.error != null &&\n                <div className=\"resultError\">\n                  {this.machine.error}\n                </div>\n              }\n              {\n                this.machine.error == null && this.machine.worthWatching == null &&\n                <div className=\"resultPlaceholder\">&nbsp;</div>\n              }\n            </div>\n            <hr/>\n            <div className=\"columnSection metrics\">\n                <div className=\"columnSection metricsHeader\">Metrics:</div>\n                {this.renderNumberMetric(\"marginInp\", \n                  this.machine.margin,\n                  \"Losing Margin\",\n                  \"Number of goals your team can lose by and still return YES\", \n                  this.onMarginChange)}\n                \n                {this.renderNumberMetric(\"maxWinDifferential\", \n                  this.machine.maxWinDifferential, \n                  \"Max Win Differential\",\n                  \"Number of goals your team can win by and still return YES\",\n                  this.onMaxWinChange)}\n                \n                {this.renderNumberMetric(\"randomPercent\",\n                  this.machine.percentage,\n                  \"Random Percentage\",\n                  \"The probability of returning YES when it would otherwise return NO\",\n                  this.onPercentChange)}\n                \n                {/* {this.renderHatTrickMetric()} */}\n            </div>\n          </div>\n          \n        </div>\n        {this.renderFooter()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n//TODO: when changing team selection, remove previous results\n//implement check for games in progress (?)\n//expanding metrics moves the carat around on the screen\n//does everything work with 0? \n//error handling for invalid number / negative numbers\n//try on mobile\n//client validation of invalid numbers - just don't allow them to be typed in\n\n\n\n/*\nMetric ideas:\n  -overtime (if losing margin is 0)\n  -first career goal (your team / either team)\n  -fight (player / anyone)\n  -goalie goal (your team / either team)\n*/","/Users/dirkstahlecker/programming/nhl-should-i-watch/client/src/teams.ts",[],["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":54,"column":31,"nodeType":"29","messageId":"30","endLine":54,"endColumn":32,"suggestions":"31"},{"ruleId":"32","severity":1,"message":"33","line":322,"column":11,"nodeType":"34","messageId":"35","endLine":322,"endColumn":14},{"ruleId":"23","replacedBy":"36"},{"ruleId":"25","replacedBy":"37"},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["40","41"],"@typescript-eslint/no-unused-vars","'day' is assigned a value but never used.","Identifier","unusedVar",["38"],["39"],"no-global-assign","no-unsafe-negation",{"messageId":"42","fix":"43","desc":"44"},{"messageId":"45","fix":"46","desc":"47"},"removeEscape",{"range":"48","text":"49"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"50","text":"51"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1450,1451],"",[1450,1450],"\\"]